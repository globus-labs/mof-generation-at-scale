# aurora_kokkos = KOKKOS/SYCL, Intel Data Center Max (Ponte Vecchio) GPU, Intel Sapphire Rapids CPU, mpicxx compiler

SHELL = /bin/sh

# ---------------------------------------------------------------------
# compiler/linker settings
# specify flags and libraries needed for your compiler

#CC =		mpicxx
#CCFLAGS =	-g -O3 -DNDEBUG
CC =		icpx -g
OPTFLAGS =      -xHost -O2 
#OPTFLAGS =      -xHost -O2 -ffast-math -freciprocal-math
CCFLAGS =	-qopenmp-simd -qopenmp -ansi-alias \
                -DLMP_INTEL_USELRT -DLMP_USE_MKL_RNG $(OPTFLAGS) \
                -I$(MKLROOT)/include -D_GLIBCXX_USE_CXX11_ABI=1  
SHFLAGS =	-fPIC
DEPFLAGS =	-M

LINK =		icpx
LINKFLAGS =	-qopenmp-simd -qopenmp  -mcmodel=medium   -flink-huge-device-code  $(OPTFLAGS) -L$(MKLROOT)/lib/intel64/  
LIB =           -ltbbmalloc -lmkl_intel_ilp64 -lmkl_sequential -lmkl_core	
SIZE =		size

ARCHIVE =	ar
ARFLAGS =	-rc
SHLIBFLAGS =	-shared
KOKKOS_DEVICES = SYCL
KOKKOS_ARCH = PVC,SPR

# ---------------------------------------------------------------------
# LAMMPS-specific settings, all OPTIONAL
# specify settings for LAMMPS features you will use
# if you change any -D setting, do full re-compile after "make clean"

# LAMMPS ifdef settings
# see possible settings in Section 3.5 of the manual

LMP_INC =	-DLAMMPS_GZIP

# MPI library
# see discussion in Section 3.4 of the manual
# MPI wrapper compiler/linker can provide this info
# can point to dummy MPI library in src/STUBS as in Makefile.serial
# use -D MPICH and OMPI settings in INC to avoid C++ lib conflicts
# INC = path for mpi.h, MPI compiler settings
# PATH = path for MPI library
# LIB = name of MPI library

MPI_INC =       -I../STUBS 
MPI_PATH =      -L../STUBS
MPI_LIB =	-lmpi_stubs

# FFT library
# see discussion in Section 3.5.2 of manual
# can be left blank to use provided KISS FFT library
# INC = -DFFT setting, e.g. -DFFT_FFTW, FFT compiler settings
# PATH = path for FFT library
# LIB = name of FFT library

FFT_INC =       -DFFT_MKL -DFFT_SINGLE
FFT_PATH = 
FFT_LIB =

# JPEG and/or PNG library
# see discussion in Section 3.5.4 of manual
# only needed if -DLAMMPS_JPEG or -DLAMMPS_PNG listed with LMP_INC
# INC = path(s) for jpeglib.h and/or png.h
# PATH = path(s) for JPEG library and/or PNG library
# LIB = name(s) of JPEG library and/or PNG library

JPG_INC =
JPG_PATH =
JPG_LIB =

#/torch/include/torch/csrc/api/include/torch/torch.h
#             /soft/datascience/aurora_models_frameworks-2023.1/lib/python3.9/site-packages/torch/include/torch/csrc/api/include/torch/torch.h
#TORCH_PATH = /soft/datascience/aurora_nre_models_frameworks-2024.0/lib/python3.9/site-packages
#TORCH_PATH = /soft/datascience/aurora_nre_models_frameworks-2024.1_preview_u2/lib/python3.9/site-packages
#TORCH_PATH = /lus/gila/projects/catalyst/world_readable/avazquez/frameworks/aurora_fw_2024.2.1_u1_test_mkl/aurora_nre_models_frameworks-2024.2.1_u1/lib/python3.10/site-packages
TORCH_PATH = /opt/aurora/24.180.3/frameworks/aurora_nre_models_frameworks-2024.2.1_u1/lib/python3.10/site-packages
#TORCH_PATH = /soft/datascience/aurora_models_frameworks-2023.1/lib/python3.9/site-packages
TORCH_INC = -I$(TORCH_PATH)/torch/include/torch/csrc/api/include  -I$(TORCH_PATH)/torch/include
TORCH_LIB = -L$(TORCH_PATH)/torch/lib -L$(TORCH_PATH)/intel_extension_for_pytorch/lib -lbackend_with_compiler  -ljitbackend_test -lintel-ext-pt-gpu -ltorch_cpu -ltorch -lc10


#  library for loading shared objects (defaults to -ldl, should be empty on Windows)
# uncomment to change the default

# override DYN_LIB =

# ---------------------------------------------------------------------
# build rules and dependencies
# do not edit this section

include Makefile.package.settings
include Makefile.package

EXTRA_INC = $(LMP_INC) $(PKG_INC) $(MPI_INC) $(FFT_INC) $(JPG_INC) $(PKG_SYSINC) $(TORCH_INC)
EXTRA_PATH = $(PKG_PATH) $(MPI_PATH) $(FFT_PATH) $(JPG_PATH) $(PKG_SYSPATH)
EXTRA_LIB = $(PKG_LIB) $(MPI_LIB) $(FFT_LIB) $(JPG_LIB) $(PKG_SYSLIB) $(DYN_LIB) $(TORCH_LIB)
EXTRA_CPP_DEPENDS = $(PKG_CPP_DEPENDS)
EXTRA_LINK_DEPENDS = $(PKG_LINK_DEPENDS)

# Path to src files

vpath %.cpp ..
vpath %.h ..

# Link target

$(EXE): main.o $(LMPLIB) $(EXTRA_LINK_DEPENDS)
	$(LINK) $(LINKFLAGS) main.o $(EXTRA_PATH) $(LMPLINK) $(EXTRA_LIB) $(LIB) -o $@
	$(SIZE) $@

# Library targets

$(ARLIB): $(OBJ) $(EXTRA_LINK_DEPENDS)
	@rm -f ../$(ARLIB)
	$(ARCHIVE) $(ARFLAGS) ../$(ARLIB) $(OBJ)
	@rm -f $(ARLIB)
	@ln -s ../$(ARLIB) $(ARLIB)

$(SHLIB): $(OBJ) $(EXTRA_LINK_DEPENDS)
	$(CC) $(CCFLAGS) $(SHFLAGS) $(SHLIBFLAGS) $(EXTRA_PATH) -o ../$(SHLIB) \
		$(OBJ) $(EXTRA_LIB) $(LIB)
	@rm -f $(SHLIB)
	@ln -s ../$(SHLIB) $(SHLIB)

# Compilation rules

%.o:%.cpp
	$(CC) $(CCFLAGS) $(SHFLAGS) $(EXTRA_INC) -c $<

# Individual dependencies

depend : fastdep.exe $(SRC)
	@./fastdep.exe $(EXTRA_INC) -- $^ > .depend || exit 1

fastdep.exe: ../DEPEND/fastdep.c
	icx -O -o $@ $<

sinclude .depend
